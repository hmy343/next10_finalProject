{"ast":null,"code":"var _jsxFileName = \"C:\\\\Ksh\\\\final\\\\finalproject\\\\src\\\\routes\\\\Treemap1.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Treemap1(_ref) {\n  _s();\n\n  let {\n    data,\n    width,\n    height\n  } = _ref;\n  const svgRef = useRef(null);\n\n  function renderTreemap() {\n    const svg = d3.select(svgRef.current);\n    svg.attr('width', width).attr('height', height);\n    const root = d3.hierarchy(data).sum(d => d.value).sort((a, b) => b.value - a.value);\n    const treemapRoot = d3.treemap().size([width, height]).padding(1)(root);\n    const nodes = svg.selectAll('g').data(treemapRoot.leaves()).join('g').attr('transform', d => `translate(${d.x0},${d.y0})`);\n\n    const fader = color => d3.interpolateRgb(color, '#fff')(0.3);\n\n    const colorScale = d3.scaleOrdinal(d3.schemeCategory10.map(fader));\n    const fontSize = 12;\n    var groups = svg.selectAll();\n    nodes;\n    group.append('text').text(d => `${d.data.name} ${d.data.value}`).attr('font-size', `${fontSize}px`).attr('x', 3).attr('y', fontSize);\n    group.append('rect').attr('width', d => d.x1 - d.x0).attr('height', d => d.y1 - d.y0).attr('fill', d => colorScale(d.data.name));\n  }\n\n  useEffect(() => {\n    renderTreemap();\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Treemap1, \"89Ty783ABEwsfMbSOeu9vscWF34=\");\n\n_c = Treemap1;\n\nvar _c;\n\n$RefreshReg$(_c, \"Treemap1\");","map":{"version":3,"sources":["C:/Ksh/final/finalproject/src/routes/Treemap1.js"],"names":["useRef","useEffect","d3","Treemap1","data","width","height","svgRef","renderTreemap","svg","select","current","attr","root","hierarchy","sum","d","value","sort","a","b","treemapRoot","treemap","size","padding","nodes","selectAll","leaves","join","x0","y0","fader","color","interpolateRgb","colorScale","scaleOrdinal","schemeCategory10","map","fontSize","groups","group","append","text","name","x1","y1"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAEA,eAAe,SAASC,QAAT,OAA2C;AAAA;;AAAA,MAAzB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAyB;AACtD,QAAMC,MAAM,GAAGP,MAAM,CAAC,IAAD,CAArB;;AAEA,WAASQ,aAAT,GAAyB;AACvB,UAAMC,GAAG,GAAGP,EAAE,CAACQ,MAAH,CAAUH,MAAM,CAACI,OAAjB,CAAZ;AAEAF,IAAAA,GAAG,CAACG,IAAJ,CAAS,OAAT,EAAkBP,KAAlB,EAAyBO,IAAzB,CAA8B,QAA9B,EAAwCN,MAAxC;AAIA,UAAMO,IAAI,GAAGX,EAAE,CACZY,SADU,CACAV,IADA,EAEVW,GAFU,CAELC,CAAD,IAAOA,CAAC,CAACC,KAFH,EAGVC,IAHU,CAGL,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACH,KAAF,GAAUE,CAAC,CAACF,KAHjB,CAAb;AAKA,UAAMI,WAAW,GAAGnB,EAAE,CAACoB,OAAH,GAAaC,IAAb,CAAkB,CAAClB,KAAD,EAAQC,MAAR,CAAlB,EAAmCkB,OAAnC,CAA2C,CAA3C,EAA8CX,IAA9C,CAApB;AAEA,UAAMY,KAAK,GAAGhB,GAAG,CACdiB,SADW,CACD,GADC,EAEXtB,IAFW,CAENiB,WAAW,CAACM,MAAZ,EAFM,EAGXC,IAHW,CAGN,GAHM,EAIXhB,IAJW,CAIN,WAJM,EAIQI,CAAD,IAAQ,aAAYA,CAAC,CAACa,EAAG,IAAGb,CAAC,CAACc,EAAG,GAJxC,CAAd;;AAMA,UAAMC,KAAK,GAAIC,KAAD,IAAW9B,EAAE,CAAC+B,cAAH,CAAkBD,KAAlB,EAAyB,MAAzB,EAAiC,GAAjC,CAAzB;;AACA,UAAME,UAAU,GAAGhC,EAAE,CAACiC,YAAH,CAAgBjC,EAAE,CAACkC,gBAAH,CAAoBC,GAApB,CAAwBN,KAAxB,CAAhB,CAAnB;AAEA,UAAMO,QAAQ,GAAG,EAAjB;AAEA,QAAIC,MAAM,GAAG9B,GAAG,CAACiB,SAAJ,EAAb;AAEAD,IAAAA,KAAK;AACHe,IAAAA,KAAK,CAACC,MAAN,CAAa,MAAb,EACKC,IADL,CACW1B,CAAD,IAAQ,GAAEA,CAAC,CAACZ,IAAF,CAAOuC,IAAK,IAAG3B,CAAC,CAACZ,IAAF,CAAOa,KAAM,EADhD,EAEKL,IAFL,CAEU,WAFV,EAEwB,GAAE0B,QAAS,IAFnC,EAGK1B,IAHL,CAGU,GAHV,EAGe,CAHf,EAIKA,IAJL,CAIU,GAJV,EAIe0B,QAJf;AAKAE,IAAAA,KAAK,CAACC,MAAN,CAAa,MAAb,EACK7B,IADL,CACU,OADV,EACoBI,CAAD,IAAOA,CAAC,CAAC4B,EAAF,GAAO5B,CAAC,CAACa,EADnC,EAEKjB,IAFL,CAEU,QAFV,EAEqBI,CAAD,IAAOA,CAAC,CAAC6B,EAAF,GAAO7B,CAAC,CAACc,EAFpC,EAGKlB,IAHL,CAGU,MAHV,EAGmBI,CAAD,IAAOkB,UAAU,CAAClB,CAAC,CAACZ,IAAF,CAAOuC,IAAR,CAHnC;AAKH;;AAED1C,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,aAAa;AACd,GAFQ,EAEN,CAACJ,IAAD,CAFM,CAAT;AAIA,sBACE;AAAA,2BACE;AAAK,MAAA,GAAG,EAAEG;AAAV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GApDqBJ,Q;;KAAAA,Q","sourcesContent":["import { useRef, useEffect } from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nexport default function Treemap1({ data, width, height }) {\r\n    const svgRef = useRef(null);\r\n  \r\n    function renderTreemap() {\r\n      const svg = d3.select(svgRef.current);\r\n  \r\n      svg.attr('width', width).attr('height', height);\r\n\r\n      \r\n  \r\n      const root = d3\r\n        .hierarchy(data)\r\n        .sum((d) => d.value)\r\n        .sort((a, b) => b.value - a.value);\r\n  \r\n      const treemapRoot = d3.treemap().size([width, height]).padding(1)(root);\r\n  \r\n      const nodes = svg\r\n        .selectAll('g')\r\n        .data(treemapRoot.leaves())\r\n        .join('g')\r\n        .attr('transform', (d) => `translate(${d.x0},${d.y0})`);\r\n  \r\n      const fader = (color) => d3.interpolateRgb(color, '#fff')(0.3);\r\n      const colorScale = d3.scaleOrdinal(d3.schemeCategory10.map(fader));\r\n  \r\n      const fontSize = 12;\r\n\r\n      var groups = svg.selectAll()\r\n\r\n      nodes\r\n        group.append('text')        \r\n            .text((d) => `${d.data.name} ${d.data.value}`)\r\n            .attr('font-size', `${fontSize}px`)\r\n            .attr('x', 3)\r\n            .attr('y', fontSize);\r\n        group.append('rect')\r\n            .attr('width', (d) => d.x1 - d.x0)\r\n            .attr('height', (d) => d.y1 - d.y0)\r\n            .attr('fill', (d) => colorScale(d.data.name));\r\n      \r\n    }\r\n  \r\n    useEffect(() => {\r\n      renderTreemap();\r\n    }, [data]);\r\n  \r\n    return (\r\n      <div>\r\n        <svg ref={svgRef} />\r\n      </div>\r\n    );\r\n  }"]},"metadata":{},"sourceType":"module"}